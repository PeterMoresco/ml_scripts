'''
This algo is a homemade implemantation of the SVM

Tutorial:
https://pythonprogramming.net/svm-in-python-machine-learning-tutorial/?completed=/svm-constraint-optimization-machine-learning-tutorial/
'''

import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
style.use('ggplot')

class SVM:
    def __init__(self, visualization=True):
        self.vis = visualization
        self.colors = {1: 'r', -1:'b'}
        if self.vis:
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(1, 1, 1)

    # Train
    def fit(self, data):
        self.data = data
        opt_dict = {}
        transforms = [[1,1],
                      [-1, 1],
                      [-1, -1],
                      [1, -1]]
        # Finding the values to work with for our range
        all_data = []
        for yi in self.data:
            for featureset in self.data[yi]:
                for feature in featureset:
                    all_data.append(feature)
        self.max_feature_value = max(all_data)
        self.min_feature_value = min(all_data)
        all_data = None

        step_sizes = [self.max_feature_value * 0.1,
                      self.max_feature_value * 0.01,
                      self.max_feature_value * 0.001]

        b_range_multiple = 5
        b_multiple = 5
        lastest_optimum = self.max_feature_value * 10

        for step in step_sizes:
            w = np.array([latest_optimum, latest_optimum])
            # This is possible because the domain is convex
            optimized = False
            while not optimized:
                for b in np.arange(-1 * (self.max_feature_value * b_range_multiple),
                                    self.max_feature_value * b_range_multiple,
                                    step * b_multiple):
                    for transform in transforms:
                        w_t = w * transform
                        found_option = True
                        for i in self.data:
                            for xi in self.data[i]:
                                yi = i
                                if not yi * (np.dot(w_t, xi) + b) >= 1:
                                    foud_option = False
                        if found_option:
                            opt_dict[np.linalg.norm(w_t)] = [w_t, b]

                if w[0] < 0:
                    optimized = True
                    print('Optimized a step')
                else:
                    w = w  - step
            norms = sorted([n for n in opt_dict])
            opt_choice = opt_dict[norms[0]]
            self.w = opt_choice[0]
            self.b = opt_choice[1]
            latest_optimum = opt_choice[0][0] + step * 2

    def predict(self, features):
        classification = np.sigm(np.dot(np.array(features), self.w) + self.b)
        if classification != 0 and self.vis:
            self.ax.scatter(features[0], features[1], s=200, marker='*', c=self.colors[classification])
        else:
            print('featureset', features, 'is on the decision boundary')

        return classification

    def visualize(self):
        [[self.ax.scatter(x[0],x[1],s=100,color=self.colors[i]) for x in data_dict[i]] for i in data_dict]



data_dict = {-1:np.array([[1,7],[2,8],[3,8],]),
            1:np.array([[5,1],[6,-1],[7,3],])}


